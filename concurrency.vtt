WEBVTT

1
00:00:01.875 --> 00:00:02.900
Hi!

2
00:00:03.715 --> 00:00:04.700
Welcome

3
00:00:05.440 --> 00:00:07.575
Thank you all for waiting

4
00:00:08.042 --> 00:00:11.000
My name is Rich Hickey and I'm here to talk about 

5
00:00:11.211 --> 00:00:11.812
Clojure

6
00:00:12.000 --> 00:00:13.648
It's a program language

7
00:00:14.000 --> 00:00:17.000
I developed to solve a number of problems

8
00:00:17.300 --> 00:00:22.852
One of which was [organized?] concurrent programs easily

9
00:00:24.500 --> 00:00:37.485
So, tonight, talks is gone a be so a general review of clojure and specific look at some of the concurrency support that sponsed by a language.

10
00:00:38.000 --> 00:00:37.485
So, I gonna siricly introduction

11
00:00:41.141 --> 00:00:50.000
As I say I give a quick tutorial of the features
But on of them really would like to do tonight is look at peace software written in clojure.

12
00:00:46.046 --> 00:00:53.486
And so, I'd liked, hopefully, if I can move a good pace.

13
00:00:56.523 --> 00:01:01.361
Get Will true my slides , so an ideas 
show an you behind I will show an your

14
And than look at some code 

15
--> 00:01:13.097
Hopefully more apartunity looking to syntatic in clojure. And feature 
Lookead at this programm. We will this thinks in the action.

16
00:01:14.141 --> 00:01:15.909
So, quick feature tutorial.

17
00:01:17.044 --> 00:01:25.385
Then [I gone] setup so a problem space in particular talk about shared state. How is doing today? How is doing in C#, Java, C++?

18
00:01:25.385 --> 00:01:37.663
What happens when we get to a multi-threading context and specifically what a some the current solution for that in all spaces. 

19
00:01:38.016 --> 00:01:39.016
You know, locken in particular.

20
00:01:41.969 --> 00:01:43.136
That somethink are done a lot of over a long period of time.

21
And, I'm tied 

22
00:01:49.435 --> 00:01:50.435
We got it a simply far to difficult

23
00:03:43.89
And tern what a clojure does. Tryin solve the problem ... transaction is a feature of a clojure.

24
00:02:20.157 --> 00:02:24.852
And cool little ant simulation with multi-threading graphic components and somethink that in gennerly
hard to correctly almost common languages

qustions..
ok. I quicly. stack

25
00:02:36.657 --> 00:02:51.505
So, I'm soft developed scedgeling system, finget printin and machine listenting software

28
00:03:03.216 --> 00:03:11.291
I archetect .. hard 
worked an C++, C#, java, Mathematic, Common LISP python.

need to here.
common lisp or scheme?
Ok, have

How java, C#, java, Scala

eml or haskel? Just a cuply.
Ok

26
python, ruby, groovy?
Ok/

How about Clojure?

And an 27
How an multi-threading programming?
So about a hafe.

aknowladmen at this point.
Great!

When you clojure, you will see...
but neve used java. What is java dark?

And 
40
00:04:41.038
I know many people come from haskel
you ti

Tonigh examples, eml will be a point
But clojure acon python, ruby, gove is dynamic language
ueful 
accessable of those

That the fundoment. It is a functional language.... And you can convension. But Clojure is a functional eml is functila. You can change it, pritty mutch.
data strucate is immutable.

So it is functial, percistent..

06
That the function is ...

Moch more functioal than most LISPs...

And I wuold say characteristics of a LISP


data strucate not in a 

gramma of a charac...

But the LISP 
but it is not a or scheme...








999
01:00:11.000 --> 01:00:16.340
So what all you even need is the refernce, that can you change.

1000
??? This recording change version

1001
01:00:18.650 --> 01:00:22.000
So, there ara three types of ???biz reference in clojure

1002
01:00:24.000 --> 01:00:32.800
This call vars, and are bar is used actaially to hold global variables and functions


1003
01:00:33.700 --> 01:00:35.300
So, this a global moution to a bar

1004
01:00:35.800 --> 01:00:43.000
In addition vars have abillatiy to be bound to values inside the thread.

1005
01:00:43.800 --> 01:00:56.000
And once a bound inside the thread that bounding is independent anothe threads. So I can bind a var call ???dex to a ???value in this thread, I can bind two different value in ???oure thread and this thread can manipulate ???axe complitly independently.


1006
01:00:56.400 --> 01:01:08.000
Without to ?encry each other. And when you done with a bounding in all rows like a stack and explain ???alibi more. But the primitive vars is a vars for ??isoletive changes with in threads.


1007
01:01:08.400 --> 01:01:16.000
This thread is only wonna will see what is that a little ???axe. This thread is only wonna see is what is that with ??axe. That what one thing that we need to do in programs.

1008
01:01:17.000 --> 01:01:35.000
Another thing that we need to do in programs is most complex case. It's the I need to move ??? this account to that account. And I wonna make the shure it's in one account or the other, never in both and never in none. That is really hard I need to change two things. Need a make a hole change atomic.





