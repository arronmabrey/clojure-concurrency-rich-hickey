WEBVTT

1
00:00:01.875 --> 00:00:02.900
Hi!

2
00:00:03.715 --> 00:00:04.700
Welcome

3
00:00:05.440 --> 00:00:07.575
Thank you all for waiting

4
00:00:08.042 --> 00:00:11.000
My name is Rich Hickey and I'm here to talk about 

5
00:00:11.211 --> 00:00:11.812
Clojure

6
00:00:12.000 --> 00:00:13.648
It's a program language

7
00:00:14.000 --> 00:00:17.000
I developed to solve a number of problems

8
00:00:17.300 --> 00:00:22.852
One of which was how to write concurrent programs easily

9
00:00:24.500 --> 00:00:37.485
So, tonight, talks is gone a be so a general overview of clojure and specific look at some of the concurrency support that sponsored to a language.

10
00:00:38.000 --> 00:00:41.000
So, I gonna certain introduction

11
00:00:41.141 --> 00:00:49.400
As I say I give a quick tutorial of the features
But on of them really would like to do tonight is look at peaces software written in clojure.

12
00:00:49.546 --> 00:00:55.000
And so, I'd liked, hopefully, if I can move a good pace.

13
00:00:55.230 --> 00:01:01.361
Get through my slides, and so an ideas behind what I gonna be showing you 

14
00:01:02.000 --> 00:01:11.361
And than look at some code. Hopefully more apartunity looking to the syntax of clojure. And some of beats features or lookead at this programm.

15
00:01:11.361 --> 00:01:13.097
Will see some of the this things in the action.

16
00:01:14.141 --> 00:01:15.909
So, quick feature tutorial.

17
00:01:17.044 --> 00:01:25.385
Then I gonna setup so a problem space in particular talk about shared state. How it doing today? How are doing in C#, Java, C++?

18
00:01:25.385 --> 00:01:35.100
What happens when we get to a multi-threading context and specifically what a some the current solution for that in all spaces. 

19
00:01:35.216 --> 00:01:38.200
You know, locken in particular

20
00:01:38.269 --> 00:01:43.136
That somethink are done a lot of over a long period of time.

21
00:01:43.500 --> 00:01:47.800
And, I'm tied, tied of try get right

22
00:01:47.900 --> 00:01:50.500
We got it a simply far too difficult

23
00:01:50.600 --> 00:01:58.130
So, [???] near and then more turn look what clojure does?

24
00:01:58.130 --> 00:02:06.500
Try solve the problem number of differnet ways... transaction is a feature of a clojure.

-------

24
00:02:20.157 --> 00:02:24.852
And cool little ant simulation with multi-threading graphic components and somethink that in gennerly
hard to correctly in most common languages


25
00:02:23.000 -> 00:02:36.300
And I hopefylly [???] time to questions. Qustion [regare ???] ok. As I said trying to go quckly in early going. But any point we have a questions don't stay stack

25
00:02:36.657 --> 00:02:51.505
So, I'm a soft developed scedgeling system, finger printing election-predection systems and machine listenting software.

28
00:03:03.216 --> 00:03:11.291
An archetect specialisin blank-paper new disgins, hard problems. Seems like that.
Worked in C++ and java and C#, Mathematic, Common LISP, python. [???] other thinks.

29
00:03:12.000 --> 00:03:12.000
And so I'd like [ch... ???] idea quckly where you are and so I know what not about bother you need to here.
-common lisp or scheme?
Ok, have

How java, C#, java, Scala

00:03:38.000 --> 
eml or haskel? Just a cuply.
Ok

26
python, ruby, groovy?
Ok/

How about Clojure?

And an 27
How an multi-threading programming?
So about a hafe.

aknowladmen at this point.
Great!

00:
When you clojure, you will see...
but neve used java. What is java dark?

And 
40
00:04:41.038
I know many people come from haskel
you ti

Tonigh examples, eml will be a point
But clojure acon python, ruby, gove is dynamic language
ueful 
accessable of those

That the fundoment. It is a functional language.... And you can convension. But Clojure is a functional eml is functila. You can change it, pritty mutch.
data strucate is immutable.

So it is functial, percistent..

06
That the function is ...

Moch more functioal than most LISPs...

And I wuold say characteristics of a LISP


data strucate not in a 

gramma of a charac...

But the LISP 
but it is not a or scheme...




30
00:07:00.000 --> 00:07:05.201
Syntax for, you know, a grammar with characters and closures is a lisp


31
And not sense. It is a many other ways it does have presence than as expressions, it seems like that.

32
But a lisp is core for suffixal level. But it is not Common Lisp or Scheme. I'm not can a have enough time in tonight talk

33
007m 20s --> 007m 25s
to draw a lot of contrast. And the one thing I would say is when I get people coming to clojure

34
007m 30s --> 007m 35s
That have experience in Common Lisp and Scheme. They have to be reminded so almost continuously to

35
007m 30s --> 007m 35s
not supposed things. You're going to look at things some are use, reuse some as the same names

007m 35s --> 007m 40s
some syntax for different meanings almost opposite meaning

007m 45s --> 007m 50s
It's not a parsicial thing. It's not just to be diferent the reasons why I use the name than do. One of the reasonces !....! good names

007m 50s --> 007m 55s
And they have to me what Common Lisp so they mean for never never never

------

008m 00s --> 008m 05s
they have a code because it looks interesting friends around the Sun

008m 05s --> 008m 10s
bird uh take a step back maybe what you're supposed to be correct if it really

008m 15s --> 008m 20s
where is not coming with us email is no backwards compatibility with those things it makes no

008m 20s --> 008m 25s
Papa's I'm so brain total of the new list












999
01:00:11.000 --> 01:00:16.340
So what all you even need is the refernce, that can you change.

1000
??? This recording change version

1001
01:00:18.650 --> 01:00:22.000
So, there ara three types of ???biz reference in clojure

1002
01:00:24.000 --> 01:00:32.800
This call vars, and are bar is used actaially to hold global variables and functions


1003
01:00:33.700 --> 01:00:35.300
So, this a global moution to a bar

1004
01:00:35.800 --> 01:00:43.000
In addition vars have abillatiy to be bound to values inside the thread.

1005
01:00:43.800 --> 01:00:56.000
And once a bound inside the thread that bounding is independent anothe threads. So I can bind a var call ???dex to a ???value in this thread, I can bind two different value in ???oure thread and this thread can manipulate ???axe complitly independently.


1006
01:00:56.400 --> 01:01:08.000
Without to ?encry each other. And when you done with a bounding in all rows like a stack and explain ???alibi more. But the primitive vars is a vars for ??isoletive changes with in threads.


1007
01:01:08.400 --> 01:01:16.000
This thread is only wonna will see what is that a little ???axe. This thread is only wonna see is what is that with ??axe. That what one thing that we need to do in programs.

1008
01:01:17.000 --> 01:01:35.000
Another thing that we need to do in programs is most complex case. It's the I need to move ??? this account to that account. And I wonna make the shure it's in one account or the other, never in both and never in none. That is really hard I need to change two things. Need a make a hole change atomic.

